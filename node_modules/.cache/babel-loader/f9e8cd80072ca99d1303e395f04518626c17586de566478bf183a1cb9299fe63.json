{"ast":null,"code":"var _jsxFileName = \"/Users/aelmorka/it_works/projects/hangman/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState } from 'react';\nimport enAlphabet from './components/alphabet.json';\nimport Letters from './components/Letters';\nimport Solution from './components/Solution';\nimport Scores from './components/Scores';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let cont = {\n    word: \"easy\",\n    hint: \"Some text\"\n  };\n  cont.filled = Array(cont.word.length).fill(\"_\");\n  let [alphabet, setAlphabet] = useState(enAlphabet);\n  let [game, setGame] = useState(cont);\n  function checkLetterInWord(letter) {\n    console.log(letter);\n    if (game.word.includes(letter)) {\n      let newGame = {\n        ...game\n      };\n      newGame.filled = game.word.split(\"\").map(el => el.toUpperCase() === letter ? letter : el).join(\"\");\n      setGame(newGame);\n      console.log(newGame);\n    }\n  }\n  function removeLetter(letter) {\n    let newAlphabet = {\n      ...alphabet\n    };\n    let index = newAlphabet.letters.findIndex(el => el.name === letter);\n    newAlphabet.letters[index].checked = true;\n    setAlphabet(newAlphabet);\n  }\n  function checkLetter(letter) {\n    checkLetterInWord(letter);\n    removeLetter(letter);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hangman\",\n    children: [/*#__PURE__*/_jsxDEV(Scores, {\n      scores: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Solution, {\n      game: game\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Letters, {\n      alphabet: alphabet.letters,\n      checked: checkLetter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/9qhESc6zmxsStbDrI6Q1WfJWns=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","enAlphabet","Letters","Solution","Scores","jsxDEV","_jsxDEV","App","_s","cont","word","hint","filled","Array","length","fill","alphabet","setAlphabet","game","setGame","checkLetterInWord","letter","console","log","includes","newGame","split","map","el","toUpperCase","join","removeLetter","newAlphabet","index","letters","findIndex","name","checked","checkLetter","className","children","scores","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aelmorka/it_works/projects/hangman/src/App.js"],"sourcesContent":["import './App.css';\nimport { useState } from 'react'\n\nimport enAlphabet from './components/alphabet.json'\n\nimport Letters from './components/Letters'\nimport Solution from './components/Solution'\nimport Scores from './components/Scores'\n\nfunction App() {\n  let cont = {word: \"easy\", hint: \"Some text\"}\n  cont.filled = Array(cont.word.length).fill(\"_\")\n  let [alphabet, setAlphabet] = useState(enAlphabet)\n  let [game, setGame] = useState(cont)\n  \n  function checkLetterInWord(letter) {\n    console.log(letter)\n    if (game.word.includes(letter)) {\n      let newGame = {...game}\n      newGame.filled = game.word.split(\"\").map(el => el.toUpperCase() === letter ? letter : el).join(\"\")\n      setGame(newGame)\n      console.log(newGame)\n    }\n  }\n  function removeLetter(letter) {\n    let newAlphabet = {...alphabet}\n    let index = newAlphabet.letters.findIndex(el => el.name === letter)\n    newAlphabet.letters[index].checked = true\n    setAlphabet(newAlphabet)\n  }\n\n  function checkLetter(letter) {\n    checkLetterInWord(letter) \n    removeLetter(letter)\n  }\n  return (\n    <div className=\"hangman\">\n      <Scores scores=\"100\" />\n      <Solution game={game}/>\n      <Letters alphabet={alphabet.letters} checked={checkLetter}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAOC,UAAU,MAAM,4BAA4B;AAEnD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,MAAM,MAAM,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,IAAIC,IAAI,GAAG;IAACC,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAW,CAAC;EAC5CF,IAAI,CAACG,MAAM,GAAGC,KAAK,CAACJ,IAAI,CAACC,IAAI,CAACI,MAAM,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAC/C,IAAI,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAACC,UAAU,CAAC;EAClD,IAAI,CAACiB,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAACS,IAAI,CAAC;EAEpC,SAASW,iBAAiBA,CAACC,MAAM,EAAE;IACjCC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACnB,IAAIH,IAAI,CAACR,IAAI,CAACc,QAAQ,CAACH,MAAM,CAAC,EAAE;MAC9B,IAAII,OAAO,GAAG;QAAC,GAAGP;MAAI,CAAC;MACvBO,OAAO,CAACb,MAAM,GAAGM,IAAI,CAACR,IAAI,CAACgB,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAACC,EAAE,IAAIA,EAAE,CAACC,WAAW,CAAC,CAAC,KAAKR,MAAM,GAAGA,MAAM,GAAGO,EAAE,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;MAClGX,OAAO,CAACM,OAAO,CAAC;MAChBH,OAAO,CAACC,GAAG,CAACE,OAAO,CAAC;IACtB;EACF;EACA,SAASM,YAAYA,CAACV,MAAM,EAAE;IAC5B,IAAIW,WAAW,GAAG;MAAC,GAAGhB;IAAQ,CAAC;IAC/B,IAAIiB,KAAK,GAAGD,WAAW,CAACE,OAAO,CAACC,SAAS,CAACP,EAAE,IAAIA,EAAE,CAACQ,IAAI,KAAKf,MAAM,CAAC;IACnEW,WAAW,CAACE,OAAO,CAACD,KAAK,CAAC,CAACI,OAAO,GAAG,IAAI;IACzCpB,WAAW,CAACe,WAAW,CAAC;EAC1B;EAEA,SAASM,WAAWA,CAACjB,MAAM,EAAE;IAC3BD,iBAAiB,CAACC,MAAM,CAAC;IACzBU,YAAY,CAACV,MAAM,CAAC;EACtB;EACA,oBACEf,OAAA;IAAKiC,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtBlC,OAAA,CAACF,MAAM;MAACqC,MAAM,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvBvC,OAAA,CAACH,QAAQ;MAACe,IAAI,EAAEA;IAAK;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACvBvC,OAAA,CAACJ,OAAO;MAACc,QAAQ,EAAEA,QAAQ,CAACkB,OAAQ;MAACG,OAAO,EAAEC;IAAY;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzD,CAAC;AAEV;AAACrC,EAAA,CAjCQD,GAAG;AAAAuC,EAAA,GAAHvC,GAAG;AAmCZ,eAAeA,GAAG;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}