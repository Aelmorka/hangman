{"ast":null,"code":"var _jsxFileName = \"/Users/aelmorka/it_works/projects/hangman/src/components/Letters.js\";\nimport Letter from './Letter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Letters({\n  rowNum,\n  alphabet\n}) {\n  let dividedAlphabet = [];\n  let numInRow = Math.ceil(alphabet.length / rowNum);\n  for (let i = 0; i < rowNum; i++) {\n    let part = [];\n    for (let j = 0; j < numInRow; j++) {\n      part.push(alphabet[i * numInRow + j]);\n    }\n    dividedAlphabet.push(part);\n  }\n  console.log(dividedAlphabet);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"letters\",\n    children: dividedAlphabet.map(el => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"letters__row\",\n        children: el.map(letter => /*#__PURE__*/_jsxDEV(Letter, {\n          letter: letter\n        }, letter.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 72\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n_c = Letters;\nvar _c;\n$RefreshReg$(_c, \"Letters\");","map":{"version":3,"names":["Letter","jsxDEV","_jsxDEV","Letters","rowNum","alphabet","dividedAlphabet","numInRow","Math","ceil","length","i","part","j","push","console","log","className","children","map","el","letter","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aelmorka/it_works/projects/hangman/src/components/Letters.js"],"sourcesContent":["import Letter from './Letter'\nexport default function Letters({rowNum, alphabet}) {\n    let dividedAlphabet = []\n    let numInRow = Math.ceil(alphabet.length / rowNum)\n    for (let i = 0 ; i < rowNum; i++) {\n        let part = []\n        for (let j = 0; j < numInRow; j++) {\n            part.push(alphabet[i*numInRow + j])\n        }\n        dividedAlphabet.push(part)\n    }\n    console.log(dividedAlphabet)\n    return (\n        <div className=\"letters\">\n            {dividedAlphabet.map(el => {\n                return <div className=\"letters__row\">{el.map(letter => <Letter key={letter.name} letter={letter}/>)}</div>\n                }\n            )}\n        </div>\n    )\n}"],"mappings":";AAAA,OAAOA,MAAM,MAAM,UAAU;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAC7B,eAAe,SAASC,OAAOA,CAAC;EAACC,MAAM;EAAEC;AAAQ,CAAC,EAAE;EAChD,IAAIC,eAAe,GAAG,EAAE;EACxB,IAAIC,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAACJ,QAAQ,CAACK,MAAM,GAAGN,MAAM,CAAC;EAClD,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAGP,MAAM,EAAEO,CAAC,EAAE,EAAE;IAC9B,IAAIC,IAAI,GAAG,EAAE;IACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,QAAQ,EAAEM,CAAC,EAAE,EAAE;MAC/BD,IAAI,CAACE,IAAI,CAACT,QAAQ,CAACM,CAAC,GAACJ,QAAQ,GAAGM,CAAC,CAAC,CAAC;IACvC;IACAP,eAAe,CAACQ,IAAI,CAACF,IAAI,CAAC;EAC9B;EACAG,OAAO,CAACC,GAAG,CAACV,eAAe,CAAC;EAC5B,oBACIJ,OAAA;IAAKe,SAAS,EAAC,SAAS;IAAAC,QAAA,EACnBZ,eAAe,CAACa,GAAG,CAACC,EAAE,IAAI;MACvB,oBAAOlB,OAAA;QAAKe,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAEE,EAAE,CAACD,GAAG,CAACE,MAAM,iBAAInB,OAAA,CAACF,MAAM;UAAmBqB,MAAM,EAAEA;QAAO,GAA5BA,MAAM,CAACC,IAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAkB,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAC1G,CACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACC,EAAA,GAnBuBxB,OAAO;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}